package com.example.walkpromote22.ChatbotFragments;

import static android.view.View.GONE;


import static com.example.walkpromote22.ChatbotFragments.RouteGeneration.generateRoute;

import static com.example.walkpromote22.tool.MapTool.rank;
import static com.example.walkpromote22.tool.MapTool.trimLocationName;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.Rect;
import android.graphics.drawable.GradientDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.text.TextUtils;
import android.util.Log;
import android.util.TypedValue;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.cardview.widget.CardView;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.amap.api.maps.Projection;
import com.amap.api.maps.model.BitmapDescriptor;
import com.amap.api.maps.model.BitmapDescriptorFactory;
import com.amap.api.maps.model.MarkerOptions;

import com.amap.api.location.AMapLocationClient;
import com.amap.api.location.AMapLocationClientOption;
import com.amap.api.maps.AMap;
import com.amap.api.maps.CameraUpdateFactory;
import com.amap.api.maps.model.CameraPosition;
import com.amap.api.maps.model.LatLng;
import com.amap.api.services.core.LatLonPoint;
import com.amap.api.services.route.BusRouteResult;
import com.amap.api.services.route.DriveRouteResult;
import com.amap.api.services.route.RideRouteResult;
import com.amap.api.services.route.RouteSearch;
import com.amap.api.services.route.WalkRouteResult;
import com.example.walkpromote22.Activities.MainActivity;
import com.example.walkpromote22.tool.BaiduTranslateHelper;
import com.example.walkpromote22.tool.MapTool;
import com.example.walkpromote22.R;
import com.example.walkpromote22.WalkFragments.WalkFragment;
import com.example.walkpromote22.data.dao.StepDao;
import com.example.walkpromote22.data.dao.UserDao;
import com.example.walkpromote22.data.database.AppDatabase;
import com.example.walkpromote22.data.model.Location;
import com.example.walkpromote22.data.model.Step;
import com.example.walkpromote22.data.model.User;
import com.example.walkpromote22.tool.WeatherTool;
import com.github.mikephil.charting.charts.LineChart;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Consumer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ChatbotFragment extends Fragment {

    private static final String TAG = "ChatbotFragment";
    private static final int REQUEST_IMAGE_CAPTURE = 1;
    private static final int REQUEST_CAMERA_PERMISSION = 100;
    // ÊîæÂú® ChatbotFragment ÊàêÂëòÂå∫


    private LinearLayout routeContainer; // Áî®‰∫éÊòæÁ§∫Âú∞ÂõæÁöÑÂÆπÂô®
    // Êéß‰ª∂Â£∞Êòé
    private EditText userInput;
    private RecyclerView recyclerView;
    private ChatAdapter chatAdapter;
    private List<Message> messageList;
    // Ë∑ØÁ∫øÂ±ïÁ§∫Âå∫Âüü

    // ÂØπËØùËæÖÂä©Á±ªÂíåÂõæÁâá Uri
    private LatLng userLocation;
    private ChatbotHelper chatbotHelper;
    private Uri photoUri;

    private String weather;


    // ÂÖ®Â±ÄÂØπËØùÂéÜÂè≤
    private JSONArray conversationHistory = new JSONArray();

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater,
                             @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_chatbot, container, false);
    }

    @SuppressLint("SetTextI18n")
    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);


        userInput = view.findViewById(R.id.user_input);
        Button sendButton = view.findViewById(R.id.send_arrow);
        recyclerView = view.findViewById(R.id.recycler_view_messages);
        routeContainer = view.findViewById(R.id.route_container);

        // ÂàùÂßãÂåñ RecyclerView
        messageList = new ArrayList<>();
        chatAdapter = new ChatAdapter(messageList);
        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
        recyclerView.setAdapter(chatAdapter);

        // ÂàùÂßãÂåñÂØπËØùÂéÜÂè≤
        try {
            conversationHistory.put(new JSONObject()
                    .put("role", "system")
                    .put("content", "You are a helpful assistant."));
        } catch (JSONException e) {
            e.printStackTrace();
        }

        View initialDialog = view.findViewById(R.id.initial_dialog);
        CardView weatherCard = view.findViewById(R.id.weather_card);
        TextView weatherContent = view.findViewById(R.id.weather_content);


        // ‚úÖ ÊèêÂâçËé∑ÂèñÂÆö‰Ωç‰ø°ÊÅØÔºàÂè™Ëé∑Âèñ‰∏ÄÊ¨°Âπ∂Â≠òÂÖ• userLocationÔºâand Êü•ËØ¢Â§©Ê∞î
     /*   prefs.edit().putString("location_lat", String.valueOf(location.latitude)).apply();
        prefs.edit().putString("location_long", String.valueOf(location.longitude)).apply();*/

        SharedPreferences prefs = requireContext().getSharedPreferences("AppData", Context.MODE_PRIVATE);
        weather = prefs.getString("weather", null);
        userLocation=new LatLng(Double.parseDouble(Objects.requireNonNull(prefs.getString("location_lat", null))),Double.parseDouble(Objects.requireNonNull(prefs.getString("location_long", null))));


        if (weather != null) {
            // Â¶ÇÈúÄÁøªËØë
            BaiduTranslateHelper.translateToEnglish(weather, new BaiduTranslateHelper.TranslateCallback() {
                @Override
                public void onTranslated(String englishText) {
                    requireActivity().runOnUiThread(() -> {
                        weatherContent.setText(englishText);
                        weatherCard.setVisibility(View.VISIBLE);
                    });
                }
                @Override
                public void onError(String error) {
                    if (!isAdded()) return;
                    requireActivity().runOnUiThread(() ->
                            Toast.makeText(getContext(), "ÁøªËØëÂ§±Ë¥•Ôºö" + error, Toast.LENGTH_SHORT).show()
                    );
                }
            });
        } else {
            // Â§©Ê∞îÂ∞öÊú™Ëé∑ÂèñÂà∞ÔºåÂèØ‰ª•ÊòæÁ§∫Âä†ËΩΩ‰∏≠
            weatherContent.setText("Loading weather...");
            weatherCard.setVisibility(View.VISIBLE);
        }

    // ÂàùÂßãÂåñ ChatbotHelperÔºàËØ∑Ê†πÊçÆÂÆûÈôÖÊÉÖÂÜµÂÆåÂñÑËé∑Âèñ                addChatMessage(message, true); API key ÁöÑÈÄªËæëÔºâ
        String apiKey = getApiKeyFromSecureStorage();
        chatbotHelper = new ChatbotHelper(apiKey);
        sendButton.setOnClickListener(v -> {
            String userMessage = userInput.getText().toString().trim();
            if (!userMessage.isEmpty()) {
                addChatMessage(userMessage, true);

                initialDialog.setVisibility(View.GONE);
                weatherContent.setVisibility(View.GONE);
                weatherCard.setVisibility(View.GONE);
                userInput.setText("");

                // ÂáÜÂ§á system promote
                String promote ="You are an route planing assistant for user and you can get extra information's from API rather than user. "+
                            "You should begin with questions like: To create the best route, I need a bit of info:" + "How long do you want to walk (time or distance)?" + "Do you prefer quiet streets, scenic spots, or lively areas?"+
                            "Following are very important:When you want a route from Map API designed according to user requests, you just respond: {Map_API_Route} and API will give you the information's in JSON" +
                            "When you want information's from Map API for certain name POIs (Like a name for shop or a name for location), you just respond: {Map_API_Certain}"+
                            "When you want to show user the route drawing in map, you just respond: {Drawing_API} and API will draw the route. " +
                            "When you want get user's walking data in this week and visualize it to user(Only step counts up to one week are supported),you just respond: {StepData_API}"+
                            "Here's a sample conversation1 I'd like you to have with your users:Sample Conversation1\n" +
                            "\n" +
                            "App: üëã Hi there! Ready for a refreshing walk today?\n" +
                            "User: Generate a suitable route for me\n" +
                            "App: Great! To create the best route, I need a bit of info:\n" +
                            "App:How long do you want to walk (time or distance)?\n" +
                            "App:Do you prefer quiet streets, scenic spots, or lively areas?\n" +
                            "User: Maybe around 30 minutes. And I‚Äôd like a scenic route.\n" +
                            "App: Got it ‚úÖ Checking nearby parks, riversides, and trails‚Ä¶ {Map_API_Route}.(using Map API to get a route satisfying user requirement ).\n" +
                            "App: üåø I‚Äôve found a peaceful riverside loop near you. It‚Äôs about 2.5 km and should take ~30 minutes. Currently, it‚Äôs not too crowded, and the sunset views are great right now.\n" +
                            "User: Sounds perfect.\n" +
                            "App: {Drawing_API} Awesome! I‚Äôll guide you step by step. Let‚Äôs start at Oakwood Park entrance. Ready to begin?." +
                            "User: Yes.\n" +
                            "App: üö∂‚Äç‚ôÇÔ∏è Let‚Äôs go! First, walk straight down Oakwood Lane for 300 meters. üåü You‚Äôre off to a strong start‚Äîdid you know a 30-minute walk can boost your mood for up to 12 hours?\n" +
                            "User (midway): I‚Äôm getting a bit tired.\n" +
                            "App: You‚Äôre doing great! üí™ You‚Äôve already covered 1.4 km‚Äîover halfway there. How about slowing down for a minute to enjoy the view by the lake?\n" +
                            "User (later): Okay, I‚Äôm back on track.\n" +
                            "App: Perfect! Only 500 meters to go. Imagine how good it‚Äôll feel to finish strong. üöÄ\n" +
                            "User (end): I‚Äôm done!\n" +
                            "App: üéâ Congratulations! You walked 2.6 km in 31 minutes. That‚Äôs about 3,400 steps. I‚Äôve saved your route in case you want to share it on your socials. Want me to post a highlight for you?\n" +
                            "User: Yes, post it.\n" +
                            "App: Done ‚úÖ Shared your walk summary with today‚Äôs scenic photo. üåÑ Way to go‚Äîyou made today healthier and brighter!"+
                            "Sample Conversation2:" +
                            "App: üëã Hi there! Ready for a refreshing walk today?\n"+
                            "User:I wanna walk to a KFC\n"+
                            "App:Got it ‚úÖ Checking nearby KFCs.{Map_API_Certain}"+
                            "App:OK, I have found several KFC around you. Which specifically you aim at?\n"+
                            "User:The one around my home"+
                            "App:Got it, generating a route to it.{Map_API_Route}"+
                            "App:{Drawing_API} I‚Äôll guide you step by step.";


                // Êää promote ÊîæÂà∞È¶ñ‰ΩçÔºå‰∏îÂè™Êèí‰∏ÄÊ¨°
                conversationHistory = ensureSystemPromote(conversationHistory, promote);

                // ÂèëÈÄÅÂπ∂Â§ÑÁêÜÂ∑•ÂÖ∑Ëß¶Âèë
                sendWithPromoteAndTooling(userMessage);
            }
        });
    }
    /* 1) Êää promote ÊîæÂà∞ÊúÄÂâçÈù¢‰∏îÂè™Êèí‰∏ÄÊ¨°ÔºàÂ∑≤Â≠òÂú®ÂàôÊê¨Âà∞È¶ñ‰ΩçÔºâ */
    private JSONArray ensureSystemPromote(JSONArray history, String promote) {
        if (promote == null || promote.isEmpty() || history == null) return history;

        int sysIdx = -1;
        for (int i = 0; i < history.length(); i++) {
            JSONObject it = history.optJSONObject(i);
            if (it != null && "system".equals(it.optString("role"))
                    && promote.equals(it.optString("content"))) {
                sysIdx = i;
                break;
            }
        }
        try {
            if (sysIdx == -1) {
                JSONArray nh = new JSONArray();
                nh.put(new JSONObject().put("role", "system").put("content", promote));
                for (int i = 0; i < history.length(); i++) nh.put(history.get(i));
                return nh;
            } else if (sysIdx != 0) {
                JSONObject sys = history.getJSONObject(sysIdx);
                JSONArray nh = new JSONArray();
                nh.put(sys);
                for (int i = 0; i < history.length(); i++) if (i != sysIdx) nh.put(history.get(i));
                return nh;
            } else {
                return history; // Â∑≤Âú®È¶ñ‰Ωç
            }
        } catch (JSONException e) {
            e.printStackTrace();
            return history;
        }
    }

    /* 2) ÂèëÈÄÅÊ∂àÊÅØÂπ∂Â§ÑÁêÜ GPT ÁöÑÂ∑•ÂÖ∑Ëß¶ÂèëÔºàMap_API / Drawing_APIÔºâ */
    // ÂèëÈÄÅÊ∂àÊÅØÂπ∂Â§ÑÁêÜ GPT ÁöÑÂ∑•ÂÖ∑Ëß¶ÂèëÔºàMap_API / Drawing_APIÔºâ‚Äî ‰øÆÂ§ç‰∫íÁõ∏ÂºïÁî®ÈóÆÈ¢òÁâà
    // ÂèëÈÄÅÊ∂àÊÅØÂπ∂Â§ÑÁêÜ GPT ÁöÑÂ∑•ÂÖ∑Ëß¶ÂèëÔºàMap_API_All / Map_API_Certain / Drawing_APIÔºâ
// Ê≥®ÊÑèÔºö
// - Map_API_All ‚Üí Êàë‰ª¨Á§∫‰æãÁªßÁª≠Áî® generateRoute ‰∫ßÂá∫‰∏ÄÊù°‚ÄúÂèØË°åË∑ØÁ∫ø‚ÄùÔºàÂ¶ÇÊûú‰Ω†ÊúâÁúüÊ≠£‚ÄúÈôÑËøëPOIÂÖ®Èáè‚ÄùÊé•Âè£ÔºåÂèØÊõøÊç¢ËøôÈáåÁöÑÂÆûÁé∞‰∏∫ place/around ËÅöÂêàÔºâ„ÄÇ
// - Map_API_Certain ‚Üí Ë∞É getCoreLocationsFromRequirement(userMsg)ÔºåËøîÂõû‚ÄúÂåπÈÖçÂêçÂ≠óÁöÑPOIÈõÜÂêàÔºà‰∏çÊòØË∑ØÁ∫øÔºÅÔºâ‚ÄùÔºåÂè™ÂõûÂñÇGPTÔºå‰∏çÁªòÂà∂Ôºå‰∏çÂÜôÂÖ• lastRouteRef„ÄÇ
// - Drawing_API ‚Üí ‰ªÖÂØπ‚ÄúË∑ØÁ∫ø‚ÄùËøõË°åÁªòÂà∂ÔºàÈúÄË¶Å lastRouteRef ÊàñÂÖàÁîüÊàêË∑ØÁ∫øÔºâ„ÄÇ
    // ÊõøÊç¢‰Ω†Áé∞ÊúâÁöÑÊñπÊ≥ï
    // ÂÆåÂÖ®Â•ëÂêà {Map_API_Route}/{Map_API_Certain}/{Drawing_API}/{StepData_API} ÁöÑÁâàÊú¨
    private void sendWithPromoteAndTooling(String userMessage) {
        final String lastUserMsg = userMessage; // Êú¨ËΩÆÁî®Êà∑ËæìÂÖ•

        // ‚Äî‚Äî ËÅöÂêà‚ÄúÂéÜÂè≤ÊâÄÊúâÂØπËØùÔºàÂê´ user & assistantÔºâ + Êú¨ËΩÆÁî®Êà∑ËæìÂÖ•‚Äù‰æõ generateRoute ‰ΩøÁî® ‚Äî‚Äî
        // ÈúÄÊ±ÇÔºöÊ†áÊ≥®ÊòØË∞ÅËØ¥ÁöÑÔºåÂπ∂Ê∏ÖÁêÜÂä©ÊâãÈáåÁöÑ‰ª§Áâå/ÂõûÊâß/‰ª£Á†ÅÂùó/Ë£∏ JSON
        final String dialogForRoute;
        {
            StringBuilder sb = new StringBuilder();
            try {
                if (conversationHistory != null) {
                    for (int i = 0; i < conversationHistory.length(); i++) {
                        org.json.JSONObject it = conversationHistory.optJSONObject(i);
                        if (it == null) continue;
                        String role = it.optString("role", "");
                        if (!"user".equals(role) && !"assistant".equals(role)) continue; // Ë∑≥Ëøá system
                        String c = it.optString("content", "");
                        if (c == null || c.isEmpty()) continue;

                        if ("assistant".equals(role)) {
                            // Ê∏ÖÁêÜÂä©ÊâãÊñáÊú¨‰∏≠ÁöÑÊäÄÊúØÊÄßÁ¨¶Âè∑ÔºåÈÅøÂÖçÂπ≤Êâ∞ generateRoute
                            c = c.replaceAll("(?is)```.*?```", " "); // ‰ª£Á†ÅÂùó
                            c = c.replaceAll("(?im)^API_(Result|Done)\\s*:\\s*\\{.*?\\}.*$", " "); // API ÂõûÊâßË°å
                            c = c.replaceAll("(?i)\\{\\s*(Map_API_Route|Map_API_Certain|Drawing_API|StepData_API)\\s*\\}", " "); // Ëä±Êã¨Âè∑‰ª§Áâå
                            c = c.replaceAll("(?i)Request\\s*:\\s*\\{\\s*(Map_API_Route|Map_API_Certain|Drawing_API|StepData_API|Map_API(?:_All)?)\\s*\\}", " "); // ÂÖºÂÆπÊóß‰ª§Áâå
                            c = c.replaceAll("(?m)^\\s*\\[.*\\]\\s*$", " "); // Ë£∏ JSON Ë°å
                            c = c.replaceAll("(?m)^\\s*\\{.*\\}\\s*$", " ");
                            c = c.replaceAll("\\s{2,}", " ").trim();
                        }
                        if (sb.length() > 0) sb.append('\n');
                        sb.append("USER".equalsIgnoreCase(role) ? "USER: " : "ASSISTANT: ").append(c);
                    }
                }
            } catch (Exception ignore) {}
            if (lastUserMsg != null && !lastUserMsg.isEmpty()) {
                if (sb.length() > 0) sb.append('\n');
                sb.append("USER: ").append(lastUserMsg); // Êú¨ËΩÆËøòÊú™ÂÖ• historyÔºåÊâãÂä®Ë°•‰∏äÂπ∂Ê†áÊ≥®
            }
            dialogForRoute = sb.toString();
        }

        // ÁºìÂ≠òÔºöÊúÄËøë‰∏ÄÊù°‚ÄúË∑ØÁ∫ø‚ÄùÔºàÁî®‰∫éÁªòÂà∂Ôºâ& ÊúÄËøë‰∏ÄÊ¨°‚ÄúÁâπÂÆöÂêçÂ≠ó POI ÂàóË°®ÔºàÂ∏¶ labelÔºâ‚Äù
        final java.util.concurrent.atomic.AtomicReference<List<Location>> lastRouteRef = new java.util.concurrent.atomic.AtomicReference<>(null);
        final java.util.concurrent.atomic.AtomicReference<org.json.JSONArray> lastCertainListRef = new java.util.concurrent.atomic.AtomicReference<>(null);

        // Ëá™Âä®Ë∞ÉÁî®‰∏äÈôêÔºåÈò≤Ê≠¢Âæ™ÁéØ
        final java.util.concurrent.atomic.AtomicInteger apiHops = new java.util.concurrent.atomic.AtomicInteger(0);
        final int MAX_API_HOPS = 2;

        // ===== Ëß¶Âèë‰ª§ÁâåÔºàÊîØÊåÅ‰∏§ÁßçÂÜôÊ≥ïÔºö{Token} ‰∏é Request:{Token}Ôºâ=====
        final int CI = java.util.regex.Pattern.CASE_INSENSITIVE;
        // Êñ∞ÂÜôÊ≥ïÔºöËä±Êã¨Âè∑
        final java.util.regex.Pattern P_ROUTE_BRACE   = java.util.regex.Pattern.compile("\\{\\s*Map_API_Route\\s*\\}", CI);
        final java.util.regex.Pattern P_CERTAIN_BRACE = java.util.regex.Pattern.compile("\\{\\s*Map_API_Certain\\s*\\}", CI);
        final java.util.regex.Pattern P_DRAW_BRACE    = java.util.regex.Pattern.compile("\\{\\s*Drawing_API\\s*\\}", CI);
        final java.util.regex.Pattern P_STEP_BRACE    = java.util.regex.Pattern.compile("\\{\\s*StepData_API\\s*\\}", CI);
        // ÂÖºÂÆπÊóßÂÜôÊ≥ïÔºöRequest:{...}
        final java.util.regex.Pattern P_ROUTE_REQ     = java.util.regex.Pattern.compile("Request\\s*:\\s*\\{\\s*Map_API_Route\\s*\\}", CI);
        final java.util.regex.Pattern P_CERTAIN_REQ   = java.util.regex.Pattern.compile("Request\\s*:\\s*\\{\\s*Map_API_Certain\\s*\\}", CI);
        final java.util.regex.Pattern P_DRAW_REQ      = java.util.regex.Pattern.compile("Request\\s*:\\s*\\{\\s*Drawing_API\\s*\\}", CI);
        final java.util.regex.Pattern P_STEP_REQ      = java.util.regex.Pattern.compile("Request\\s*:\\s*\\{\\s*StepData_API\\s*\\}", CI);
        // Ëøõ‰∏ÄÊ≠•ÂÖºÂÆπÔºöËÄÅÁöÑ Map_API / Map_API_All Áªü‰∏ÄÂΩì‰Ωú Route
        final java.util.regex.Pattern P_ROUTE_OLD_REQ = java.util.regex.Pattern.compile("Request\\s*:\\s*\\{\\s*Map_API(?:_All)?\\s*\\}", CI);
        final java.util.regex.Pattern P_ROUTE_OLD_BR  = java.util.regex.Pattern.compile("\\{\\s*Map_API(?:_All)?\\s*\\}", CI);

        // ‰∫íÁõ∏ÂºïÁî®ÁöÑÂõûË∞ÉÂÆπÂô®
        final java.util.concurrent.atomic.AtomicReference<java.util.function.Consumer<String>> handleRef = new java.util.concurrent.atomic.AtomicReference<>();
        final java.util.concurrent.atomic.AtomicReference<java.util.function.Consumer<String>> feedRef   = new java.util.concurrent.atomic.AtomicReference<>();

        // ÊääÂ∑•ÂÖ∑ÁªìÊûúÂõûÂñÇÁªô GPTÔºàÂÜçÊ¨°Ëµ∞ LLMÔºâ
        feedRef.set((String toolPayload) -> {
            if (apiHops.incrementAndGet() > MAX_API_HOPS) {
                requireActivity().runOnUiThread(() -> addChatMessage("‚ö†Ô∏è Â∑≤ËææÂà∞Ëá™Âä®Ë∞ÉÁî®‰∏äÈôê„ÄÇ", false));
                return;
            }
            chatbotHelper.sendMessage(toolPayload, conversationHistory, new ChatbotResponseListener() {
                @Override public void onResponse(String reply2) {
                    java.util.function.Consumer<String> h = handleRef.get();
                    if (h != null) h.accept(reply2);
                }
                @Override public void onFailure(String error) {
                    requireActivity().runOnUiThread(() ->
                            addChatMessage("Failed to connect to Chatbot: " + error, false));
                }
            });
        });

        // Áªü‰∏ÄÂ§ÑÁêÜ GPT ÂõûÂ§çÔºàËØÜÂà´Ëß¶Âèë„ÄÅÊ∏ÖÁêÜ‰ª§Áâå„ÄÅË∞ÉÁî® API„ÄÅÂõûÂñÇÔºâ
        handleRef.set((String replyRaw) -> {
            if (replyRaw == null) {
                requireActivity().runOnUiThread(() -> addChatMessage("ÔºàÁ©∫ÂìçÂ∫îÔºâ", false));
                return;
            }

            // ‚Äî‚Äî ÊòØÂê¶ÂåÖÂê´ÂêÑÁ±ªËß¶Âèë ‚Äî‚ÄîÔºàÊîØÊåÅ‰∏§ÁßçÂÜôÊ≥ïÔºâ
            boolean needRoute   = P_ROUTE_BRACE.matcher(replyRaw).find()   || P_ROUTE_REQ.matcher(replyRaw).find()
                    || P_ROUTE_OLD_BR.matcher(replyRaw).find() || P_ROUTE_OLD_REQ.matcher(replyRaw).find();
            boolean needCertain = P_CERTAIN_BRACE.matcher(replyRaw).find() || P_CERTAIN_REQ.matcher(replyRaw).find();
            boolean needDraw    = P_DRAW_BRACE.matcher(replyRaw).find()    || P_DRAW_REQ.matcher(replyRaw).find();
            boolean needStep    = P_STEP_BRACE.matcher(replyRaw).find()    || P_STEP_REQ.matcher(replyRaw).find();

            // ‚Äî‚Äî Â±ïÁ§∫ÁªôÁî®Êà∑ÁöÑÂèØËØªÊñáÊú¨ÔºöÁßªÈô§ÊâÄÊúâ‰ª§ÁâåÔºà‰∏§ÁßçÂÜôÊ≥ïÈÉΩÊ∏ÖÁêÜÔºâ ‚Äî‚Äî
            String visible = replyRaw;
            visible = P_ROUTE_BRACE.matcher(visible).replaceAll("");
            visible = P_CERTAIN_BRACE.matcher(visible).replaceAll("");
            visible = P_DRAW_BRACE.matcher(visible).replaceAll("");
            visible = P_STEP_BRACE.matcher(visible).replaceAll("");
            visible = P_ROUTE_REQ.matcher(visible).replaceAll("");
            visible = P_CERTAIN_REQ.matcher(visible).replaceAll("");
            visible = P_DRAW_REQ.matcher(visible).replaceAll("");
            visible = P_STEP_REQ.matcher(visible).replaceAll("");
            visible = P_ROUTE_OLD_BR.matcher(visible).replaceAll("");
            visible = P_ROUTE_OLD_REQ.matcher(visible).replaceAll("");
            visible = visible.replaceAll("\\n{3,}", "\n\n").trim();
            if (!visible.isEmpty()) {
                String finalVisible = visible;
                requireActivity().runOnUiThread(() -> addChatMessage(finalVisible, false));
            }

            // ‚Äî‚Äî Map_API_Certain / Map_API_Route / Step Áªü‰∏ÄÊîæÂêéÂè∞Á∫øÁ®ãÈ°∫Â∫èÊâßË°å ‚Äî‚Äî
            // ‚Äî‚Äî Map_API_Certain / Map_API_Route / Step Áªü‰∏ÄÊîæÂêéÂè∞Á∫øÁ®ãÈ°∫Â∫èÊâßË°å ‚Äî‚Äî
            if (needCertain || needRoute || needStep) {
                final boolean alsoDraw = needDraw; // ÂΩìÂâçËøôÊù°ÂõûÂ§çÊòØÂê¶ËøòË¶ÅÊ±ÇÁªòÂà∂
                new Thread(() -> {
                    try {
                        // 1) {Map_API_Certain}ÔºöÊäΩÂèñ‚ÄúÁâπÂÆöÂêçÂ≠ó POI ÈõÜÂêà‚ÄùÔºàÈùûË∑ØÁ∫øÔºâ‚Üí Áõ¥Êé•ÁºìÂ≠òÂéüÂßãÊï∞ÁªÑ ‚Üí ÂõûÂñÇ
                        if (needCertain) {
                            org.json.JSONArray poiArray;
                            try {
                                // ‚úÖ Âè™Áî®‚Äú‰∏ä‰∏ÄÂè•Áî®Êà∑ËæìÂÖ•‚Äù
                                poiArray = RouteGeneration.getCoreLocationsFromRequirement(lastUserMsg);
                            } catch (Exception ex) {
                                Log.e(TAG, "Map_API_Certain Ë∞ÉÁî®Â§±Ë¥•Ôºö", ex);
                                poiArray = new org.json.JSONArray();
                            }
                            // Áõ¥Êé•ÁºìÂ≠òÔºà‰∏çÊâìÊ†áÁ≠æÔºâ
                            lastCertainListRef.set(poiArray);

                            String payloadCertain = "API_Result:{Map_API_Certain}\n" + poiArray.toString();
                            java.util.function.Consumer<String> f = feedRef.get();
                            if (f != null) requireActivity().runOnUiThread(() -> f.accept(payloadCertain));
                        }

                        // 2) {Map_API_Route}ÔºöÂü∫‰∫é‚Äú‰∏ä‰∏ÄÊ≠•ÁºìÂ≠ò + Êú¨ËΩÆËæìÂÖ•‰∏≠ÁöÑÂêçÁß∞ÂåπÈÖç‚ÄùÁ°ÆÂÆöÁõÆÁöÑÂú∞ ‚Üí ÁîüÊàêË∑ØÁ∫ø
                        if (needRoute) {
                            org.json.JSONArray poiList = lastCertainListRef.get();
                            org.json.JSONObject chosen = null;

                            if (poiList != null && poiList.length() > 0) {
                                String msg = (lastUserMsg == null) ? "" : lastUserMsg;

                                // 2.1 ÂêçÁß∞ÂåÖÂê´Ôºà‰∏çÂå∫ÂàÜÂ§ßÂ∞èÂÜôÔºâ
                                for (int i = 0; i < poiList.length(); i++) {
                                    org.json.JSONObject o = poiList.optJSONObject(i);
                                    if (o == null) continue;
                                    String nm = o.optString("name", "");
                                    if (!nm.isEmpty() && msg.toLowerCase(java.util.Locale.ROOT).contains(nm.toLowerCase(java.util.Locale.ROOT))) {
                                        chosen = o; break;
                                    }
                                }

                                // 2.2 Ê®°Á≥äÂåπÈÖçÔºöÂéªÁ©∫Ê†º/Á¨¶Âè∑ÂÜçÊØîÂØπ
                                if (chosen == null && !msg.isEmpty()) {
                                    String normMsg = msg.replaceAll("[\\s\\p{Punct}]+","").toLowerCase(java.util.Locale.ROOT);
                                    for (int i = 0; i < poiList.length(); i++) {
                                        org.json.JSONObject o = poiList.optJSONObject(i);
                                        if (o == null) continue;
                                        String nm = o.optString("name", "");
                                        String normNm = nm.replaceAll("[\\s\\p{Punct}]+","").toLowerCase(java.util.Locale.ROOT);
                                        if (!normNm.isEmpty() && normMsg.contains(normNm)) { chosen = o; break; }
                                    }
                                }

                                // 2.3 ‰ªçÊó† ‚Üí ÈªòËÆ§ÂèñÁ¨¨‰∏Ä‰∏™
                                if (chosen == null) chosen = poiList.optJSONObject(0);
                            }

                            // 2.4 ÁîüÊàê‚ÄúË∑ØÁ∫ø‚ÄùÂπ∂‰øùÂ≠ò ‚Äî‚Äî ‚úÖ Áî® dialogForRouteÔºàÂéÜÂè≤ÂÖ®ÈÉ®ÂØπËØùÔºâ
                            List<Location> route = null;
                            try {
                                if (chosen != null) {
                                    String hint = String.format(java.util.Locale.US,
                                            "\n[ROUTE_TARGET] name=%s; lat=%.6f; lng=%.6f",
                                            chosen.optString("name",""),
                                            chosen.optDouble("latitude", 0d),
                                            chosen.optDouble("longitude", 0d));
                                    route = RouteGeneration.generateRoute(requireContext(), dialogForRoute + hint);
                                } else {
                                    route = RouteGeneration.generateRoute(requireContext(), dialogForRoute);
                                }
                            } catch (Exception e) {
                                Log.e(TAG, "generateRoute failed: " + e.getMessage());
                            }
                            lastRouteRef.set(route);

                            // ÂõûÂñÇ‚ÄúË∑ØÁ∫ø JSON‚Äù
                            org.json.JSONArray routeArr = new org.json.JSONArray();
                            if (route != null) {
                                for (Location L : route) {
                                    org.json.JSONObject o = new org.json.JSONObject();
                                    o.put("name", L.getName());
                                    o.put("latitude", L.getLatitude());
                                    o.put("longitude", L.getLongitude());
                                    routeArr.put(o);
                                }
                            }
                            String payloadRoute = "API_Result:{Map_API_Route}\n" + routeArr.toString();
                            java.util.function.Consumer<String> f = feedRef.get();
                            if (f != null) requireActivity().runOnUiThread(() -> f.accept(payloadRoute));

                            // ÂêåÊù°Ë¶ÅÊ±ÇÁªòÂà∂ ‚Üí Áõ¥Êé•ÁîªÂπ∂ÂëäÁü•ÂÆåÊàê
                            if (alsoDraw) {
                                List<Location> r = lastRouteRef.get();
                                if (r != null && !r.isEmpty()) {
                                    List<Location> finalR = r;
                                    requireActivity().runOnUiThread(() -> {
                                        try { addBotRouteMessage(Collections.singletonList(finalR)); } catch (Exception e) { throw new RuntimeException(e); }
                                        java.util.function.Consumer<String> f2 = feedRef.get();
                                        if (f2 != null) f2.accept("API_Done:{Drawing_API}");
                                    });
                                } else {
                                    requireActivity().runOnUiThread(() ->
                                            addChatMessage("ÁªòÂà∂Â§±Ë¥•ÔºöÊöÇÊó†ÂèØÁî®Ë∑ØÁ∫ø„ÄÇ", false));
                                }
                            }
                        }

                        // 3) {StepData_API}ÔºöËøîÂõûËøáÂéª‰∏ÄÂë®Ê≠•Êï∞ÔºàÊ≠§Â§ÑÁïôÁ©∫Êï∞ÁªÑÂç†‰ΩçÔºåÁ≠â‰Ω†Êé•ÂÅ•Â∫∑Êï∞ÊçÆÂêéÊõøÊç¢Ôºâ
                        if (needStep) {
                            org.json.JSONArray steps = new org.json.JSONArray();
                            // TODO: Êé•ÂÖ•‰Ω†ÁöÑÊ≠•Êï∞Êù•Ê∫êÔºà‰æãÂ¶Ç Health Connect/ÊúçÂä°Á´ØÔºâ
                            // ÊúüÊúõÊ†ºÂºè‰æãÔºö[{ "date":"2025-08-10", "steps":5234 }, ... 7 Êù°]
                            String payloadStep = "API_Result:{StepData_API}\n" + steps.toString();
                            java.util.function.Consumer<String> f = feedRef.get();
                            if (f != null) requireActivity().runOnUiThread(() -> f.accept(payloadStep));
                        }
                    } catch (Exception e) {
                        requireActivity().runOnUiThread(() ->
                                addChatMessage("Â∑•ÂÖ∑Â§ÑÁêÜÂ§±Ë¥•Ôºö" + e.getMessage(), false));
                    }
                }).start();
                return;
            }


            // Âè™ËØ∑Ê±ÇÁªòÂà∂ÔºöÈúÄË¶ÅÂ∑≤Êúâ‚ÄúË∑ØÁ∫ø‚ÄùÔºõÊ≤°ÊúâÂàôÂÖàÁîüÊàêÔºà‚úÖ Áî® dialogForRouteÔºâ
            if (needDraw) {
                List<Location> r = lastRouteRef.get();
                if (r == null || r.isEmpty()) {
                    new Thread(() -> {
                        try {
                            List<Location> route = RouteGeneration.generateRoute(requireContext(), dialogForRoute);
                            lastRouteRef.set(route);
                            requireActivity().runOnUiThread(() -> {
                                try { addBotRouteMessage(Collections.singletonList(route)); } catch (Exception e) { throw new RuntimeException(e); }
                                java.util.function.Consumer<String> f = feedRef.get();
                                if (f != null) f.accept("API_Done:{Drawing_API}");
                            });
                        } catch (Exception e) {
                            requireActivity().runOnUiThread(() ->
                                    addChatMessage("ÁªòÂà∂Â§±Ë¥•ÔºàÊó†ÂèØÁî®Ë∑ØÁ∫øÔºâÔºö" + e.getMessage(), false));
                        }
                    }).start();
                } else {
                    requireActivity().runOnUiThread(() -> {
                        try { addBotRouteMessage(Collections.singletonList(r)); } catch (Exception e) { throw new RuntimeException(e); }
                        java.util.function.Consumer<String> f = feedRef.get();
                        if (f != null) f.accept("API_Done:{Drawing_API}");
                    });
                }
                return;
            }

            // Êó†‰ªª‰ΩïÂ∑•ÂÖ∑Ëß¶ÂèëÔºöÂè™Â±ïÁ§∫Ëá™ÁÑ∂ËØ≠Ë®Ä
        });

        // È¶ñÊ¨°ÊääÁî®Êà∑Ê∂àÊÅØÂèëÁªô GPT
        chatbotHelper.sendMessage(userMessage, conversationHistory, new ChatbotResponseListener() {
            @Override public void onResponse(String reply) {
                java.util.function.Consumer<String> h = handleRef.get();
                if (h != null) h.accept(reply);
            }
            @Override public void onFailure(String error) {
                requireActivity().runOnUiThread(() ->
                        addChatMessage("Failed to connect to Chatbot: " + error, false));
            }
        });
    }

    private void showWeekReport(){

            String message = "My exercise report for this week";
            addChatMessage(message, true);
            new Thread(() -> {
                // Ëé∑ÂèñÁî®Êà∑Ê†áËØÜ
                String userKey = requireContext().getSharedPreferences("user_prefs", Context.MODE_PRIVATE)
                        .getString("USER_KEY", null);
                AppDatabase db = AppDatabase.getDatabase(getContext());
                StepDao stepDao = db.stepDao();
                UserDao userDao = db.userDao();

                // Ëé∑ÂèñÂΩìÂâçÁî®Êà∑‰ΩìÈáçÔºàkgÔºâÔºåËã•Ëé∑ÂèñÂ§±Ë¥•ÂàôÈªòËÆ§70kg
                float weight = 70f;
                try {
                    weight = userDao.getUserByKey(userKey).getWeight();
                } catch (Exception e) {
                    e.printStackTrace();
                }

                // Ëé∑ÂèñÂΩìÂâçÊó•ÊúüÂíåËøáÂéª7Â§©ÔºàÂê´‰ªäÂ§©ÔºâÁöÑÊó∂Èó¥ËåÉÂõ¥
                Calendar calendar = Calendar.getInstance();
                Date today = calendar.getTime();
                calendar.add(Calendar.DAY_OF_YEAR, -6);  // ËøáÂéª7Â§©
                Date startDate = calendar.getTime();
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());

                // ‰ΩøÁî® LinkedHashMap ‰øùÊåÅÊó•ÊúüÈ°∫Â∫èËÆ∞ÂΩïÊØèÂ§©ÁöÑÊ≠•Êï∞„ÄÅË∑ùÁ¶ªÂíåÂç°Ë∑ØÈáå
                LinkedHashMap<String, Integer> stepsMap = new LinkedHashMap<>();
                LinkedHashMap<String, Float> distanceMap = new LinkedHashMap<>();
                LinkedHashMap<String, Float> calorieMap = new LinkedHashMap<>();

                // Âæ™ÁéØËé∑ÂèñËøáÂéª7Â§©ÁöÑËÆ∞ÂΩï
                Calendar tempCal = Calendar.getInstance();
                tempCal.setTime(startDate);
                while (!tempCal.getTime().after(today)) {
                    String dateStr = sdf.format(tempCal.getTime());
                    Step stepRecord = stepDao.getStepByDate(userKey, dateStr);
                    if (stepRecord != null) {
                        int steps = stepRecord.getStepCount();
                        float distance = stepRecord.getDistance(); // Âçï‰ΩçÔºöÁ±≥
                        // ËÆ°ÁÆóË∑ùÁ¶ªËΩ¨Êç¢‰∏∫ÂÖ¨Èáå
                        float distanceKm = distance / 1000f;
                        // Ê†πÊçÆÂÖ¨ÂºèËÆ°ÁÆóÂç°Ë∑ØÈáå
                        float calories = distanceKm * weight * 1.036f;

                        stepsMap.put(dateStr, steps);
                        distanceMap.put(dateStr, distance);
                        calorieMap.put(dateStr, calories);
                    } else {
                        stepsMap.put(dateStr, 0);
                        distanceMap.put(dateStr, 0f);
                        calorieMap.put(dateStr, 0f);
                    }
                    tempCal.add(Calendar.DAY_OF_YEAR, 1);
                }



                // Âú®‰∏ªÁ∫øÁ®ãÊõ¥Êñ∞ UIÔºåÂ±ïÁ§∫Ê±áÊÄªÊä•Âëä
                // Âú®‰∏ªÁ∫øÁ®ãÊõ¥Êñ∞ UIÔºåÂ±ïÁ§∫Ê±áÊÄªÊä•Âëä
                requireActivity().runOnUiThread(() ->
                        addWeeklyExerciseChart(stepsMap, distanceMap, calorieMap)
                );


                // ÊãºÊé•ÂÆåÊï¥Ê∂àÊÅØÔºåÂèëÈÄÅÁªô GPT ËøõË°åÊï∞ÊçÆÂàÜÊûêÔºàË¶ÅÊ±ÇÁ≠îÊ°àÂú® 100 tokens ÂÜÖÔºâ
                String fullMessage = "You are a helpful training assistant in a walking promoting application, based on the following weekly exercise data:\n"
                        + getTrainingData()
                        + "Please analyze my performance and suggest improvements.";
                requireActivity().runOnUiThread(() -> {
                    chatbotHelper.sendMessage(fullMessage, conversationHistory, new ChatbotResponseListener() {
                        @Override
                        public void onResponse(String reply) {
                            addChatMessage(reply, false);
                        }
                        @Override
                        public void onFailure(String error) {
                            addChatMessage("Failed to connect to Chatbot: " + error, false);
                        }
                    });
                });
            }).start();
    }






    private String getTrainingData(){
        String userKey = requireContext().getSharedPreferences("user_prefs", Context.MODE_PRIVATE)
                .getString("USER_KEY", null);
        AppDatabase db = AppDatabase.getDatabase(getContext());
        StepDao stepDao = db.stepDao();
        UserDao userDao = db.userDao();

        // Ëé∑ÂèñÂΩìÂâçÁî®Êà∑‰ΩìÈáçÔºàkgÔºâÔºåËã•Ëé∑ÂèñÂ§±Ë¥•ÂàôÈªòËÆ§70kg
        float weight = 70f;
        try {
            weight = userDao.getUserByKey(userKey).getWeight();
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Ëé∑ÂèñÂΩìÂâçÊó•ÊúüÂíåËøáÂéª7Â§©ÔºàÂê´‰ªäÂ§©ÔºâÁöÑÊó∂Èó¥ËåÉÂõ¥
        Calendar calendar = Calendar.getInstance();
        Date today = calendar.getTime();
        calendar.add(Calendar.DAY_OF_YEAR, -6);  // ËøáÂéª7Â§©
        Date startDate = calendar.getTime();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());

        // ‰ΩøÁî® LinkedHashMap ‰øùÊåÅÊó•ÊúüÈ°∫Â∫èËÆ∞ÂΩïÊØèÂ§©ÁöÑÊ≠•Êï∞„ÄÅË∑ùÁ¶ªÂíåÂç°Ë∑ØÈáå
        LinkedHashMap<String, Integer> stepsMap = new LinkedHashMap<>();
        LinkedHashMap<String, Float> distanceMap = new LinkedHashMap<>();
        LinkedHashMap<String, Float> calorieMap = new LinkedHashMap<>();

        // Âæ™ÁéØËé∑ÂèñËøáÂéª7Â§©ÁöÑËÆ∞ÂΩï
        Calendar tempCal = Calendar.getInstance();
        tempCal.setTime(startDate);
        while (!tempCal.getTime().after(today)) {
            String dateStr = sdf.format(tempCal.getTime());
            Step stepRecord = stepDao.getStepByDate(userKey, dateStr);
            if (stepRecord != null) {
                int steps = stepRecord.getStepCount();
                float distance = stepRecord.getDistance(); // Âçï‰ΩçÔºöÁ±≥
                // ËÆ°ÁÆóË∑ùÁ¶ªËΩ¨Êç¢‰∏∫ÂÖ¨Èáå
                float distanceKm = distance / 1000f;
                // Ê†πÊçÆÂÖ¨ÂºèËÆ°ÁÆóÂç°Ë∑ØÈáå
                float calories = distanceKm * weight * 1.036f;

                stepsMap.put(dateStr, steps);
                distanceMap.put(dateStr, distance);
                calorieMap.put(dateStr, calories);
            } else {
                stepsMap.put(dateStr, 0);
                distanceMap.put(dateStr, 0f);
                calorieMap.put(dateStr, 0f);
            }
            tempCal.add(Calendar.DAY_OF_YEAR, 1);
        }

        // ÊûÑÂª∫Ê±áÊÄª‰ø°ÊÅØÂ≠óÁ¨¶‰∏≤
        StringBuilder summaryStr = new StringBuilder();
        summaryStr.append("<b>Weekly Exercise Summary</b><br>");
        summaryStr.append("<table border='1' cellspacing='0' cellpadding='4'>");
        summaryStr.append("<tr><th>Date</th><th>Steps</th><th>Distance (km)</th><th>Calories (cal)</th></tr>");
        for (String date : stepsMap.keySet()) {
            summaryStr.append("<tr>")
                    .append("<td>").append(date).append("</td>")
                    .append("<td>").append(stepsMap.get(date)).append("</td>")
                    .append("<td>").append(String.format("%.2f", distanceMap.get(date) / 1000.0)).append("</td>")
                    .append("<td>").append(String.format("%.2f", calorieMap.get(date))).append("</td>")
                    .append("</tr>");
        }
        summaryStr.append("</table>");


        return summaryStr.toString();
    }




    private void checkCameraPermissionAndOpenCamera() {
        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.CAMERA)
                != PackageManager.PERMISSION_GRANTED) {
            requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CAMERA_PERMISSION);
        } else {
            dispatchTakePictureIntent();
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
                                           @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == REQUEST_CAMERA_PERMISSION) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                dispatchTakePictureIntent();
            } else {
                Toast.makeText(getContext(), "Áõ∏Êú∫ÊùÉÈôêË¢´ÊãíÁªùÔºåÊó†Ê≥ïÊãçÁÖß", Toast.LENGTH_SHORT).show();
            }
        }
    }

    @SuppressLint("QueryPermissionsNeeded")
    private void dispatchTakePictureIntent() {
        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        if (takePictureIntent.resolveActivity(requireActivity().getPackageManager()) != null) {
            File photoFile = null;
            try {
                photoFile = createImageFile();
            } catch (IOException ex) {
                Log.e(TAG, "Error occurred while creating the image file", ex);
            }
            if (photoFile != null) {
                try {
                    photoUri = FileProvider.getUriForFile(requireContext(),
                            "com.example.myapp.fileprovider", photoFile);
                } catch (Exception e) {
                    Log.e(TAG, "FileProvider.getUriForFile exception", e);
                    return;
                }
                takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoUri);
                takePictureIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);
            } else {
                Log.e(TAG, "photoFile is null");
            }
        } else {
            Log.e(TAG, "No camera app available");
        }
    }

    private File createImageFile() throws IOException {
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault())
                .format(new Date());
        String imageFileName = "JPEG_" + timeStamp + "_";
        File storageDir = requireActivity().getExternalFilesDir(null);
        if (storageDir != null && !storageDir.exists()) {
            storageDir.mkdirs();
        }
        return File.createTempFile(imageFileName, ".jpg", storageDir);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == Activity.RESULT_OK) {
            chatbotHelper.sendPhotoMessage(photoUri.toString(), requireContext(), new ChatbotResponseListener() {
                @Override
                public void onResponse(String reply) {
                    addChatMessage(reply, false);
                }
                @Override
                public void onFailure(String error) {
                    addChatMessage("Failed to connect to Chatbot (Photo): " + error, false);
                }
            });
        }
    }



    /**
     * Êää LatLng Âú®ÂΩìÂâçÂ±èÂπïÂùêÊ†áÁ≥ªÈáå‰∏ä‰∏ãÊå™Âá†‰∏™ÂÉèÁ¥†ÂêéÂÜçËΩ¨ÂõûÂú∞ÁêÜÂùêÊ†á
     *
     * @param aMap       Â∑≤Áªè ready ÁöÑ AMap ÂÆû‰æã
     * @param src        Ë¶ÅÂÅèÁßªÁöÑÂéüÂßãÂùêÊ†á
     * @param offsetYPx  ÂÉèÁ¥†ÂÅèÁßªÈáèÔºàË¥üÊï∞ = ÂæÄ‰∏äÔºåÊ≠£Êï∞ = ÂæÄ‰∏ãÔºâ
     */
    static LatLng offsetOnScreen(AMap aMap, LatLng src, int offsetYPx) {
        Projection pj = aMap.getProjection();
        Point p = pj.toScreenLocation(src);
        p.y += offsetYPx;              // ‚ÜëÂæÄ‰∏äÂ∞±ÊòØÂáèÔºå‚ÜìÂæÄ‰∏ãÂ∞±ÊòØÂä†
        return pj.fromScreenLocation(p);
    }


    /** Áîª‰∏Ä‰∏™ POI Ê†áÁ≠æÔºàÂèØÈÄâÂÉèÁ¥†ÂÅèÁßªÔºâ */
    private void drawLabel(AMap aMap, Location loc, int offsetYPx) {
        String raw = loc.getName();
        if (TextUtils.isEmpty(raw)) return;

        String core = trimLocationName(raw);
        Consumer<String> paint = name -> {
            LatLng labelPos = offsetOnScreen(
                    aMap,
                    new LatLng(loc.getLatitude(), loc.getLongitude()),
                    offsetYPx);            // ‚ÜëË¥üÊï∞ÂæÄ‰∏äÔºå‚ÜìÊ≠£Êï∞ÂæÄ‰∏ã
            addPoiLabel(aMap, labelPos.latitude, labelPos.longitude, name);
        };

        if (core.matches(".*[\\u4E00-\\u9FA5]+.*")) {
            BaiduTranslateHelper.translateToEnglish(core,
                    new BaiduTranslateHelper.TranslateCallback() {
                        public void onTranslated(String en) { paint.accept(en); }
                        public void onError(String e)        { paint.accept(core); }
                    });
        } else paint.accept(core);
    }




    /* ---------- ‰∏ªÊñπÊ≥ï ---------- */
    @SuppressLint("SetTextI18n")
    private void addBotRouteMessage(List<List<Location>> routes) throws Exception {

        List<List<Location>> ordered_routes=rank(routes);


        View root = LayoutInflater.from(getContext())
                .inflate(R.layout.bot_route_message, recyclerView, false);
        LinearLayout container = root.findViewById(R.id.route_maps_container);
        int mapH = (int) (150 * getResources().getDisplayMetrics().density);

        for (int i = 0; i < Math.min(ordered_routes.size(), 3); i++) {

            List<Location> route = ordered_routes.get(i);

            /* ‚Äî‚Äî‚Äî Shell ‚Äî‚Äî‚Äî */
            RelativeLayout card = new RelativeLayout(getContext());
            card.setLayoutParams(new RelativeLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT, mapH));
            card.setPadding(8, 8, 8, 8);

            /* ‚Äî‚Äî‚Äî Map ‚Äî‚Äî‚Äî */
            MapTool mapView = new MapTool(getContext());
            mapView.setLayoutParams(new RelativeLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT, mapH));
            mapView.onCreate();

            List<LatLng> latLngs = new ArrayList<>();
            for (Location l : route) latLngs.add(new LatLng(l.getLatitude(), l.getLongitude()));
            mapView.drawRoute(latLngs, Color.parseColor("#FF4081"));
            card.addView(mapView);

            /* ‚Äî‚Äî‚Äî Distance chip ‚Äî‚Äî‚Äî */
            TextView chip = new TextView(getContext());
            chip.setTextSize(12);
            chip.setTextColor(Color.WHITE);
            chip.setPadding(10, 4, 10, 4);
            GradientDrawable chipBg = new GradientDrawable();
            chipBg.setColor(Color.parseColor("#66000000"));
            chipBg.setCornerRadius(6 * getResources().getDisplayMetrics().density);
            chip.setBackground(chipBg);

            RelativeLayout.LayoutParams chipLp = new RelativeLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            chipLp.setMargins(12, 12, 0, 0);
            chip.setLayoutParams(chipLp);
            card.addView(chip);

            mapdistance(route, userLocation,
                    r -> chip.setText(String.format(Locale.getDefault(), "%.0f m", r.getValue())));

            /* ‚Äî‚Äî‚Äî ‚ÄúNavigate‚Äù button ¬∑ smaller ‚Äî‚Äî‚Äî */
            AppCompatButton nav = new AppCompatButton(getContext());
            nav.setText("Navigate");
            nav.setTextSize(12);
            nav.setAllCaps(false);
            nav.setTextColor(Color.WHITE);

            /* ‚ë† Ê∏ÖÊéâÊâÄÊúâÁ≥ªÁªüÈªòËÆ§ padding / minSize */
            nav.setPadding(0, 0, 0, 0);
            nav.setMinWidth(0);           // remove AppCompat 48dp minWidth / minHeight
            nav.setMinHeight(0);
            nav.setMinimumWidth(0);
            nav.setMinimumHeight(0);
            nav.setIncludeFontPadding(false);  // remove extra top spacing in font

            /* ‚ë° Ëá™ÂÆö‰πâÁ™ÑËÉåÊôØÔºà6dp ÂúÜËßí„ÄÅÊ∑±ÁÅ∞Â°´ÂÖÖÔºâ‚Äî‚ÄîÊó†ÂÜÖÈÉ® inset */
            GradientDrawable bg = new GradientDrawable();
            bg.setColor(Color.parseColor("#424242"));         // Ê∑±ÁÅ∞
            bg.setCornerRadius(6 * getResources().getDisplayMetrics().density);
            nav.setBackground(bg);

            /* ‚ë¢ ÁÇπÂáªÊ∞¥Ê≥¢Á∫πÔºàAndroid ÂéüÁîüÔºâ */
            TypedValue tv = new TypedValue();
            getContext().getTheme().resolveAttribute(
                    android.R.attr.selectableItemBackgroundBorderless, tv, true);
            nav.setForeground(ContextCompat.getDrawable(getContext(), tv.resourceId));

            /* ‚ë£ LayoutParamsÔºöÁ¥ßË¥¥Â∫ïÈÉ®„ÄÅÊ∞¥Âπ≥Â±Ö‰∏≠„ÄÅÊó†Â§ñËæπË∑ù */
            RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                    ViewGroup.LayoutParams.WRAP_CONTENT,
                    ViewGroup.LayoutParams.WRAP_CONTENT);
            lp.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
            lp.addRule(RelativeLayout.CENTER_HORIZONTAL);
            lp.bottomMargin = 0;          // Á¥ßË¥¥Â∫ï
            nav.setLayoutParams(lp);

            nav.setOnClickListener(v -> {
                if (isAdded() && getActivity() instanceof MainActivity) {
                    Bundle b = new Bundle();

                    long routeId=route.get(0).getRoute_id();
                    b.putLong("route_id", routeId);
                    WalkFragment wf = new WalkFragment();
                    wf.setArguments(b);
                    ((MainActivity) getActivity()).updateNavigationSelection(R.id.nav_walk, wf);
                }
            });
            card.addView(nav);

            /* ‚Äî‚Äî‚Äî Map ready ‚Äî‚Äî‚Äî */
            mapView.postDelayed(() -> {
                AMap aMap = mapView.getMapView() != null ? mapView.getMapView().getMap() : null;
                if (aMap == null) return;

                aMap.showMapText(false);

                Location north = Collections.max(route, Comparator.comparingDouble(Location::getLatitude));
                Location south = Collections.min(route, Comparator.comparingDouble(Location::getLatitude));

                Log.e("DEBUG", north.getName());
                Log.e("DEBUG", south.getName()); // Â∫îËØ•ËÉΩËé∑Âèñ name

                final double LABEL_GAP_M = 50;                       // ÈòàÂÄºÔºö<50 m ËÆ§‰∏∫‰ºöÈáçÂè†
                double gap = MapTool.distanceBetween(
                        new LatLng(north.getLatitude(), north.getLongitude()),
                        new LatLng(south.getLatitude(), south.getLongitude()));

                // ---------- ÂÖ≥ÈîÆÂà§Êñ≠ ----------
                List<Location> picks;
                if (north.equals(south) || gap < LABEL_GAP_M) {
                    // ‰∏§ÁÇπÈáçÂêàÊàñÂ§™Ëøë ‚Üí Âè™Áïô‰∏Ä‰∏™
                    picks = Collections.singletonList(north);        // ‰πüÂèØ‰ª•ÊîπÊàê south
                } else {
                    // Ë∑ùÁ¶ªË∂≥Â§üËøú ‚Üí ‰∏§‰∏™ÈÉΩÊòæÁ§∫
                    picks = Arrays.asList(north, south);
                }
                ExecutorService pool = Executors.newSingleThreadExecutor();
                pool.execute(() -> {
                    /* north ‚Üí ÂæÄ‰∏äÂÅè 60px  */
                    drawLabel(aMap, north, -60);

                    /* Â¶ÇÊûú north ‚â† southÔºåÂàô south ‚Üí ÂæÄ‰∏ãÂÅè 60px */
                    if (!north.equals(south)) {
                        drawLabel(aMap, south, +60);
                    }
                });
                pool.shutdown();
                LatLng center = MapTool.calculateCenter(latLngs);
                float zoomLevel = getZoomLevel();

                aMap.animateCamera(CameraUpdateFactory.newCameraPosition(
                        new CameraPosition.Builder().target(center).zoom(zoomLevel).tilt(30f).build()));

                aMap.getUiSettings().setAllGesturesEnabled(false);
            }, 200);

            container.addView(card);
        }

        addChatMessage(root, false);
    }

    private static float getZoomLevel() {
        float distanceKm = (float) RouteGeneration.distanceOfRoute; // Âçï‰ΩçÂÅáËÆæÊòØ km
        float zoomLevel;

        if (distanceKm <= 1.0f) {
            zoomLevel = 15f;
        } else if (distanceKm <= 3.0f) {
            zoomLevel = 14f;
        } else if (distanceKm <= 5.0f) {
            zoomLevel = 13.5f;
        } else if (distanceKm <= 8.0f) {
            zoomLevel = 13f;
        } else if (distanceKm <= 12.0f) {
            zoomLevel = 12.5f;
        } else {
            zoomLevel = 12f; // Êõ¥ËøúÁöÑË∑ùÁ¶ªÔºåÁº©Â∞èËßÜËßí
        }
        return zoomLevel;
    }


    /** Ëá™Âä®ÊåâÂ≠óÊï∞Ëá™ÈÄÇÂ∫îÂ≠óÂè∑ */
    private void addPoiLabel(AMap map, double lat, double lon, String txt) {
        requireActivity().runOnUiThread(() -> {
            /* === 1. Ê†πÊçÆÈïøÂ∫¶ÂÜ≥ÂÆö sp === */
            /* ---------- Ëá™ÈÄÇÂ∫îÂ≠óÂè∑ (22‚ÄÜ‚Üí‚ÄÜ16‚ÄÜ‚Üí‚ÄÜ12‚ÄÜ‚Üí‚ÄÜ10) ---------- */
            int len = txt.length();
            int sp;

            if (len <= 4) {                         // ‚â§4 Â≠ó
                sp = 22;
            } else if (len <= 20) {                 // 4~20: 22‚Üí16
                float t = (len - 4f) / 16f;         // 0‚Üí1
                sp = Math.round(22 - (22 - 16) * t);
            } else if (len <= 40) {                 // 20~40: 16‚Üí12
                float t = (len - 20f) / 20f;        // 0‚Üí1
                sp = Math.round(16 - (16 - 12) * t);
            } else {                                // >40 Â≠ó
                sp = 10;
            }



            /* === 2. ËÆ°ÁÆóÊñáÊú¨Â∞∫ÂØ∏ === */
            Paint p = new Paint(Paint.ANTI_ALIAS_FLAG);
            p.setTextSize(sp2px(sp));
            Rect bounds = new Rect();
            p.getTextBounds(txt, 0, txt.length(), bounds);

            int stroke = 4;                                     // ÊèèËæπÂÆΩ px
            int w = bounds.width()  + stroke * 2;
            int h = bounds.height() + stroke * 2;

            Bitmap bmp = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);
            Canvas c = new Canvas(bmp);

            /* === 3. ÊèèËæπÔºàÁôΩÔºâ === */
            Paint strokePaint = new Paint(p);
            strokePaint.setStyle(Paint.Style.STROKE);
            strokePaint.setColor(Color.WHITE);
            strokePaint.setStrokeWidth(stroke);
            strokePaint.setTextAlign(Paint.Align.LEFT);
            c.drawText(txt, stroke, h - stroke, strokePaint);

            /* === 4. Â°´ÂÖÖÔºàÁªøËâ≤ & ÂçäÈÄèÊòéÔºâ === */
            /* === 4. Â°´ÂÖÖÔºàÊ∑±ÁªøËâ≤ & ÂçäÈÄèÊòéÔºâ === */
            int bodyColor = Color.argb(230, 0x2E, 0x7D, 0x32);  // #2E7D32
            Paint fillPaint = new Paint(p);
            fillPaint.setColor(bodyColor);
            c.drawText(txt, stroke, h - stroke, fillPaint);


            /* === 5. Marker === */
            BitmapDescriptor icon = BitmapDescriptorFactory.fromBitmap(bmp);
            map.addMarker(new MarkerOptions()
                    .position(new LatLng(lat, lon))
                    .icon(icon)
                    .anchor(0.5f, 1f)   // Â∫ïÈÉ®‰∏≠ÂøÉÂØπÂáÜÂùêÊ†á
                    .zIndex(5));
        });
    }



    /* ---------- sp ‚Üí px Â∑•ÂÖ∑ ---------- */
    private float sp2px(float sp) {
        return sp * getResources().getDisplayMetrics().scaledDensity;
    }









    /**
     * ËæÖÂä©ÊñπÊ≥ïÔºöËÆ°ÁÆó‰∏ÄÁªÑÂùêÊ†áÁöÑ‰∏≠ÂøÉÁÇπ
     */

// ËøîÂõûÁªìÊûú‰∏∫ÔºöEntry<locationId, distance>
    public interface MinWalkDistanceCallback {
        void onMinDistanceReady(Map.Entry<Long, Double> result);


    }
    private void mapdistance(List<Location> routeLocations, LatLng userLocation, MinWalkDistanceCallback callback) {
        if (routeLocations == null || routeLocations.isEmpty() || userLocation == null) {
            callback.onMinDistanceReady(new AbstractMap.SimpleEntry<>((long) -1, -1.0));
            return;
        }

        // Step 1: ÊâæÂà∞Áõ¥Á∫øË∑ùÁ¶ªÊúÄËøëÁöÑÁÇπ
        Location nearestLocation = null;
        double minLineDistance = Double.MAX_VALUE;

        for (Location location : routeLocations) {
            double d = straightLineDistance(
                    userLocation.latitude, userLocation.longitude,
                    location.getLatitude(), location.getLongitude()
            );
            if (d < minLineDistance) {
                minLineDistance = d;
                nearestLocation = location;
            }
        }

        if (nearestLocation == null) {
            callback.onMinDistanceReady(new AbstractMap.SimpleEntry<>((long) -1, -1.0));
            return;
        }

        // Step 2: ‰ΩøÁî®È´òÂæ∑ API ËÆ°ÁÆóÁúüÂÆûÊ≠•Ë°åË∑ùÁ¶ª
        LatLonPoint startPoint = new LatLonPoint(userLocation.latitude, userLocation.longitude);
        LatLonPoint endPoint = new LatLonPoint(nearestLocation.getLatitude(), nearestLocation.getLongitude());
        long nearestId = nearestLocation.getId();

        RouteSearch routeSearch = new RouteSearch(getContext());
        RouteSearch.WalkRouteQuery query = new RouteSearch.WalkRouteQuery(
                new RouteSearch.FromAndTo(startPoint, endPoint),
                RouteSearch.WALK_DEFAULT
        );

        routeSearch.setRouteSearchListener(new RouteSearch.OnRouteSearchListener() {
            @Override
            public void onWalkRouteSearched(WalkRouteResult result, int errorCode) {
                if (errorCode == 1000 && result != null && result.getPaths() != null && !result.getPaths().isEmpty()) {
                    float dist = result.getPaths().get(0).getDistance();
                    callback.onMinDistanceReady(new AbstractMap.SimpleEntry<>(nearestId, (double) dist));
                } else {
                    callback.onMinDistanceReady(new AbstractMap.SimpleEntry<>((long) -1, -1.0));
                }
            }

            @Override public void onBusRouteSearched(BusRouteResult busRouteResult, int i) {}
            @Override public void onDriveRouteSearched(DriveRouteResult driveRouteResult, int i) {}
            @Override public void onRideRouteSearched(RideRouteResult rideRouteResult, int i) {}
        });

        routeSearch.calculateWalkRouteAsyn(query);
    }

    private double straightLineDistance(double lat1, double lng1, double lat2, double lng2) {
        float[] result = new float[1];
        android.location.Location.distanceBetween(lat1, lng1, lat2, lng2, result);
        return result[0];
    }





    private void addChatMessage(View view, boolean isUser) {
        // ÂÅáËÆæ‰Ω†ÁöÑ Message Á±ªÊîØÊåÅÂ≠òÂÇ®‰∏Ä‰∏™ View Á±ªÂûãÁöÑÊ∂àÊÅØÂÜÖÂÆπ
        Message msg = new Message(view, isUser); // ‰øÆÊîπ Message Á±ªÊûÑÈÄ†ÊñπÊ≥ïÊîØÊåÅ View Á±ªÂûãÂÜÖÂÆπ
        messageList.add(msg);
        chatAdapter.notifyItemInserted(messageList.size() - 1);
        recyclerView.smoothScrollToPosition(messageList.size() - 1);
    }
    /**
     * Â∞ÜÊ∂àÊÅØÊ∑ªÂä†Âà∞ RecyclerView Âπ∂Êõ¥Êñ∞ÁïåÈù¢
     */
    private void addChatMessage(String text, boolean isUser) {
        text = text.replaceAll("\\d{5,}", "");

// 2. ÂéªÊéâÂºÄÂ§¥ÂíåÁªìÂ∞æÁöÑÁ©∫Ê†ºÔºàtrimÔºâ
        text = text.trim();

// 3. Â∞ÜÂ§ö‰∏™ËøûÁª≠Á©∫Ê†ºÂèò‰∏∫‰∏Ä‰∏™Á©∫Ê†º
        text = text.replaceAll("\\s{2,}", " ");
        if (getActivity() == null) return;
        String finalText = text;
        getActivity().runOnUiThread(() -> {
            messageList.add(new Message(finalText, isUser));
            chatAdapter.notifyItemInserted(messageList.size() - 1);
            recyclerView.smoothScrollToPosition(messageList.size() - 1);
        });
    }


    public interface LocationCallback {
        void onLocationReceived(LatLng location) throws Exception;
        void onLocationFailed(String error);
    }

    // Âú® ChatbotFragment ÂÜÖÈÉ®Ê∑ªÂä† getCurrentLocation ÊñπÊ≥ï





    /**
     * Ê®°Êãü‰ªéÂÆâÂÖ®Â≠òÂÇ®‰∏≠Ëé∑Âèñ API ÂØÜÈí•ÁöÑÈÄªËæëÔºàËØ∑Ê†πÊçÆÂÆûÈôÖÊÉÖÂÜµ‰øÆÊîπÔºâ
     */
    private String getApiKeyFromSecureStorage() {
        return "sk-O62I7CQRETZ1dSFevmJWqdsJtsfWmg91sbBdWY8tJDRbgYTm";
    }

    public void addWeeklyExerciseChart(Map<String, Integer> stepsMap, Map<String, Float> distanceMap, Map<String, Float> calorieMap) {
        // ‰ΩøÁî® ChartHelper ÁîüÊàêÊäòÁ∫øÂõæ
        LineChart lineChart = ChartHelper.generateLineChart(getContext(), stepsMap, distanceMap, calorieMap);

        // ÂàõÂª∫ Message ÂØπË±°Âπ∂Â∞ÜÊäòÁ∫øÂõæ‰Ωú‰∏∫ customView
        Message chartMessage = new Message(lineChart, false);  // false Ë°®Á§∫Êú∫Âô®‰∫∫Ê∂àÊÅØ

        // Ê∑ªÂä†Âà∞Ê∂àÊÅØÂàóË°®Âπ∂Êõ¥Êñ∞ UI
        messageList.add(chartMessage);
        chatAdapter.notifyDataSetChanged();
    }


    @Override
    public void onDestroyView() {
        super.onDestroyView();
        if (routeContainer != null) {
            // ÈÅçÂéÜÂÆπÂô®ÂÜÖÁöÑÊâÄÊúâÂ≠êËßÜÂõæÔºåÊâæÂà∞ MapContainerView Âπ∂Ë∞ÉÁî®ÂÖ∂ onDestroy ÊñπÊ≥ï
            for (int i = 0; i < routeContainer.getChildCount(); i++) {
                View child = routeContainer.getChildAt(i);
                if (child instanceof MapTool) {
                    ((MapTool) child).onDestroy();
                }
            }
            routeContainer.removeAllViews();
        }
    }




}
